package $packageName;

import java.awt.*;

import java.util.ArrayList;

import javax.swing.*;

import oracle.adf.model.*;
import oracle.adf.model.BindingContext;
import oracle.adf.model.binding.*;

import oracle.jbo.uicli.binding.JUApplication;
import oracle.jbo.uicli.binding.JUUtil;
import oracle.jbo.uicli.controls.*;
import oracle.jbo.uicli.jui.*;

import oracle.jdeveloper.layout.*;

public class $className extends JPanel implements JUPanel {
    //PageDefinition File	
    private JUPanelBinding panelBinding = new JUPanelBinding("$pageDefFileId");
    private BorderLayout panelLayout = new BorderLayout();
    
    #foreach($objects in $templateObjects)
		private $objects.ControlType $objects.VariableName = new $objects.ControlType ();
    #end

    private JTabbedPane tabbedPane = new JTabbedPane();

    /**The default constructor for master-detail panel
     */
    public $className() {
    }

    /**the JbInit method
     */
    public void jbInit() throws Exception {
        BindingContext _bctx = panelBinding.getBindingContext();
        #foreach($objects in $templateObjects)
			$!{objects.VariableName}.bindNestedContainer(panelBinding.findNestedPanelBinding("$objects.Properties.detailPageDefFileId"));
	  #end        

        this.setLayout(panelLayout);

	  #foreach($objects in $templateObjects)
			tabbedPane.add($objects.VariableName, "$objects.Properties.viewBindingName");
	  #end

        this.add(tabbedPane, BorderLayout.CENTER);
    }

    /**JUPanel implementation
     */
    public JUPanelBinding getPanelBinding() {
        return panelBinding;
    }

    public void bindNestedContainer(JUPanelBinding ctr) {
        if (panelBinding.getPanel() == null) {
            ctr.setPanel(this);
            panelBinding.release(DCDataControl.REL_VIEW_REFS);
            panelBinding = ctr;
            registerProjectGlobalVariables(panelBinding.getBindingContext());
            try {
                jbInit();
            } catch (Exception ex) {
                ex.printStackTrace();
                ctr.reportException(ex);
            }
        }
    }

    private void registerProjectGlobalVariables(BindingContext bindCtx) {
        JUUtil.registerNavigationBarInterface(panelBinding, bindCtx);
    }

    private void unRegisterProjectGlobalVariables(BindingContext bindCtx) {
        JUUtil.unRegisterNavigationBarInterface(panelBinding, bindCtx);
    }

    public void setBindingContext(BindingContext bindCtx) {
        if (panelBinding.getPanel() == null) {
            panelBinding = panelBinding.setup(bindCtx, this);
            registerProjectGlobalVariables(bindCtx);
            panelBinding.refreshControl();
            try {
                jbInit();
                panelBinding.refreshControl();
            } catch (Exception ex) {
                panelBinding.reportException(ex);
            }
        }
    }

    public static void main(String [] args) {
     #if($supportsJGoodiesLnF)
        try {
            UIManager.setLookAndFeel("com.jgoodies.looks.plastic.PlasticXPLookAndFeel");
        } catch (ClassNotFoundException cnfe) {
            try {
                UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            } catch (Exception exemp) {
                exemp.printStackTrace();
            }
        } catch (Exception exemp) {
            exemp.printStackTrace();
        }
      #else
        try {
                UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception exemp) {
                exemp.printStackTrace();
        }
      #end

        $className panel = new $className();
        panel.setBindingContext(JUTestFrame.startTestFrame("$cpxFileQualifiedName", "null", panel, panel.getPanelBinding(), new Dimension(400,300)));
        panel.revalidate();
	}

}

