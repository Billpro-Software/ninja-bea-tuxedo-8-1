package $packageName;

import com.jgoodies.forms.layout.*;

import java.awt.*;
import java.awt.event.*;

import java.util.ArrayList;

import javax.swing.*;
import javax.swing.table.*;
import javax.swing.text.*;

import oracle.adf.model.*;
import oracle.adf.model.BindingContext;
import oracle.adf.model.binding.*;

import oracle.jbo.uicli.binding.*;
import oracle.jbo.uicli.controls.*;
import oracle.jbo.uicli.jui.*;

import oracle.jdeveloper.layout.*;

public class $className extends JPanel implements JUPanel {
    
    //PageDefinition File	
    private JUPanelBinding panelBinding = new JUPanelBinding("$pageDefFileId");
    private JPanel dataPanel = new JPanel();
    private BorderLayout borderLayout = new BorderLayout();
	#*
	-
	Generate layout definiton based on column type
	-
	*#
	#set ( $columnsRange = $cols)
	#set ($colSpecs = "3dlu,")
    #foreach ( $counter in [1..$columnsRange] )
                        #if($smallColNum == $counter)
                                #set($newSpec = "m:n,")
                        #else
                                #set ($newSpec = "d:g,")
                        #end
			#set ($colSpecs = "$colSpecs$newSpec")
			#if($counter == $columnsRange)
					#set ($newSpec = "3dlu")
					#set ($colSpecs = "$colSpecs$newSpec")
			#else
					#set ($newSpec = "3dlu,")
					#set ($colSpecs = "$colSpecs$newSpec")
			#end
     #end
	 #set ($rowsRange = $rows)	 
	 #set ($rowSpecs = "3dlu,")
	 #foreach ( $rowCounter in [1..$rowsRange] )
	 		#set ($newSpec = "d,")
			#set ($rowSpecs = "$rowSpecs$newSpec")
			#if($rowCounter == $rowsRange)
					#set ($newSpec = "3dlu")
					#set ($rowSpecs = "$rowSpecs$newSpec")
			#else
					#set ($newSpec = "3dlu,")
					#set ($rowSpecs = "$rowSpecs$newSpec")
			#end
	 #end
	 private FormLayout panelLayout = new FormLayout("$colSpecs", "$rowSpecs");
     #foreach($objects in $templateObjects)
		private $objects.ControlType $objects.VariableName = new $objects.ControlType ();
		#if ($objects.RequiresLabel)
			#if ($objects.LabelVariableName)
				private JLabel $objects.LabelVariableName = new JLabel();
			#else
				private JLabel label$objects.VariableName = new JLabel();
				#set ($objects.LabelVariableName = "label$objects.VariableName")
			#end
		#end
		#if ($objects.RequiresScrollPane)
			#if ($objects.ScrollVariableName)
			    private JScrollPane $objects.ScrollVariableName = new JScrollPane();
			#else
				private JScrollPane ${objects.VariableName}ScrollPane = new JScrollPane();
				#set ($objects.ScrollVariableName = "${objects.VariableName}ScrollPane")
			#end
		#end
	 #end
	 #if($navBar)
		 private JUNavigationBar navBar = new JUNavigationBar();
	 #end
         private JScrollPane jScrollPane1 = new JScrollPane();
         
    /**The default constructor for panel
     */
    public $className() 
    {
    }

    /**the JbInit method
     */
    public void jbInit() throws Exception {
        dataPanel.setLayout(panelLayout);
        dataPanel.setMinimumSize(new Dimension(100,100));
        jScrollPane1.setMinimumSize(new Dimension(100, 100));
        jScrollPane1.setEnabled(true);
        jScrollPane1.setViewportView(dataPanel);
        this.setLayout(borderLayout);
		#set($_index = 0)
		#set($_rowOffSet = 0)
		#set($_colOffset = 0)
		#set($_columnwrapper = $cols)
		#set($_markLabel = $markMandatoryFields)
		//Add the controls to the layout
	    #foreach($objects in $templateObjects)
			#set($rowChanger = $_index%$_columnwrapper)
			#if ($rowChanger == 0 || $objects.RequiresNewRow)
				#set($_rowOffSet = $_rowOffSet + 2)
				#set($_colOffset = 0)
                                #set($_index = 0)
			#end                        
			#if ($objects.RequiresLabel)
                                  #set($_colValue = $objects.Column)
                                  #set($_rowValue = $objects.Row)
                                  #set($_colOffset =$_colOffset+2)                                  
                                  #if($_colValue == -1)
                                        #set($_colValue = $_colOffset)
                                  #else
                                        #set($_colValue = ($_colValue - 1) * 2)
                                  #end                                  
                                  #if($_rowValue == -1)
                                        #set($_rowValue = $_rowOffSet)
                                  #else
                                        #set($_rowValue = $_rowValue * 2)
                                  #end
				  dataPanel.add($objects.LabelVariableName, new CellConstraints("$_colValue , $_rowValue ,1,1,default,"+CellConstraints.FILL));
				  #set($_index = $_index + 1)
			#end                        
			#set($_colOffset =$_colOffset+2)
                        #set($_colValue = $objects.Column)
                        #set($_rowValue = $objects.Row)
                        #if($_colValue == -1)
                                #set($_colValue = $_colOffset)
                        #else
                                #set($_colValue = $_colValue * 2)
                        #end                                  
                        #if($_rowValue == -1)
                                #set($_rowValue = $_rowOffSet)
                        #else
                                #set($_rowValue = $_rowValue * 2)
                        #end                        
			#if ($objects.RequiresScrollPane)
				dataPanel.add($objects.ScrollVariableName, new CellConstraints("$_colValue, $_rowValue ,1,1,default,"+CellConstraints.FILL));
				$!{objects.ScrollVariableName}.getViewport().add($objects.VariableName);
			#else
				dataPanel.add($objects.VariableName, new CellConstraints("$_colValue, $_rowValue ,1,1,default,"+CellConstraints.FILL));
			#end
			#set($_index = $_index + 1)
            #end
	    #foreach($objects in $templateObjects)
            
			#if ($objects.RequiresLabel)
				#if ($objects.RequiresScrollPane)
				  $!{objects.LabelVariableName}.setLabelFor(${objects.ScrollVariableName});
				#else
					 $!{objects.LabelVariableName}.setLabelFor(${objects.VariableName});
				#end
				   #set ($labelText = $objects.LabelSetTextCode)
				   #if ($objects.IsMandatory)						
						#if($_markLabel == 2)
							$!{objects.LabelVariableName}.setText("<html><B>"+panelBinding.$labelText+"</B></html>");
						#elseif($_markLabel == 1)
							$!{objects.LabelVariableName}.setText(panelBinding.$labelText + "*");
						#else
							$!{objects.LabelVariableName}.setText(panelBinding.$labelText);
						#end
				   #else
						$!{objects.LabelVariableName}.setText(panelBinding.$labelText);
				   #end
			#end
                        #if($objects.ShouldSetDefaultText)
                                $!{objects.VariableName}.setText("...");
                        #end                                
			$!{objects.VariableName}.setToolTipText(panelBinding.$objects.ToolTipTextCode);
			#if($objects.ADFHints)
				#foreach($hints in $objects.ADFHints)
					$hints;
				#end
			#end
		#end
		#if($navBar)
			navBar.setModel(JUNavigationBar.createViewBinding(panelBinding, navBar, "$viewBindingName", null, "$viewBindingIteratorName"));
  		    add(navBar, BorderLayout.NORTH);
		#end
		add(jScrollPane1, BorderLayout.CENTER);
		//BindingCodes
	    #foreach($objects in $templateObjects)
			$objects.BindingString;
		#end
                
            #foreach($objects in $templateObjects)
                if ("Hide".equalsIgnoreCase(panelBinding.getDisplayHint("$viewBindingName","$objects.getBindingId()", null)))
                {
                    dataPanel.remove($objects.VariableName);
                    dataPanel.remove($objects.LabelVariableName);
                } 	
            #end

    }


    /**JUPanel implementation
     */
    public JUPanelBinding getPanelBinding() {
        return panelBinding;
    }

    public void bindNestedContainer(JUPanelBinding ctr) {
        if (panelBinding.getPanel() == null) {
            ctr.setPanel(this);
            panelBinding.release(DCDataControl.REL_VIEW_REFS);
            panelBinding = ctr;
            registerProjectGlobalVariables(panelBinding.getBindingContext());
            try {
                jbInit();
            } catch (Exception ex) {
                ex.printStackTrace();
                ctr.reportException(ex);
            }
        }
    }

    private void registerProjectGlobalVariables(BindingContext bindCtx) {
        JUUtil.registerNavigationBarInterface(panelBinding, bindCtx);
    }

    private void unRegisterProjectGlobalVariables(BindingContext bindCtx) {
        JUUtil.unRegisterNavigationBarInterface(panelBinding, bindCtx);
    }

    public void setBindingContext(BindingContext bindCtx) {
        if (panelBinding.getPanel() == null) {
            panelBinding = panelBinding.setup(bindCtx, this);
            registerProjectGlobalVariables(bindCtx);
            panelBinding.refreshControl();
            try {
                jbInit();
                panelBinding.refreshControl();
            } catch (Exception ex) {
                panelBinding.reportException(ex);
            }
        }
    }
    
   #if($generateMain)
    public static void main(String [] args) {
     #if($supportsJGoodiesLnF)
        try {
            UIManager.setLookAndFeel("com.jgoodies.looks.plastic.PlasticXPLookAndFeel");
        } catch (ClassNotFoundException cnfe) {
            try {
                UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            } catch (Exception exemp) {
                exemp.printStackTrace();
            }
        } catch (Exception exemp) {
            exemp.printStackTrace();
        }
      #else
        try {
                UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception exemp) {
                exemp.printStackTrace();
        }
      #end
      
        $className panel = new $className();
        panel.setBindingContext(JUTestFrame.startTestFrame("$cpxFileQualifiedName", "null", panel, panel.getPanelBinding(), new Dimension(400,300)));
        panel.revalidate();
    }
    #end
}
