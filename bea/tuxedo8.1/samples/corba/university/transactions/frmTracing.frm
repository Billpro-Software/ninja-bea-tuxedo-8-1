VERSION 5.00
Object = "{3B7C8863-D78F-101B-B9B5-04021C009402}#1.1#0"; "RICHTX32.OCX"
Object = "{F9043C88-F6F2-101A-A3C9-08002B2F49FB}#1.1#0"; "COMDLG32.OCX"
Begin VB.Form frmTracing 
   Caption         =   "Application Event Tracing"
   ClientHeight    =   3192
   ClientLeft      =   8460
   ClientTop       =   2028
   ClientWidth     =   4680
   LinkTopic       =   "Form1"
   ScaleHeight     =   3192
   ScaleWidth      =   4680
   Begin MSComDlg.CommonDialog CommonDialog1 
      Left            =   1560
      Top             =   0
      _ExtentX        =   847
      _ExtentY        =   847
      _Version        =   327681
   End
   Begin VB.ComboBox cmbLevel 
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   9.6
         Charset         =   0
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   &H00000000&
      Height          =   360
      Left            =   2040
      TabIndex        =   2
      Text            =   "Tracing Level"
      Top             =   120
      Width           =   2535
   End
   Begin RichTextLib.RichTextBox rtbTracing 
      Height          =   2535
      Left            =   120
      TabIndex        =   0
      Top             =   600
      Width           =   4455
      _ExtentX        =   7853
      _ExtentY        =   4466
      _Version        =   327681
      ScrollBars      =   3
      OLEDragMode     =   0
      OLEDropMode     =   0
      TextRTF         =   $"frmTracing.frx":0000
   End
   Begin VB.Label lblLevel 
      Caption         =   "Tracing Level"
      BeginProperty Font 
         Name            =   "MS Sans Serif"
         Size            =   9.6
         Charset         =   0
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      Height          =   255
      Left            =   120
      TabIndex        =   1
      Top             =   120
      Width           =   1695
   End
   Begin VB.Menu mnuTraceExit 
      Caption         =   "Exit"
   End
   Begin VB.Menu mnuTraceClear 
      Caption         =   "Clear"
   End
   Begin VB.Menu mnuTraceSave 
      Caption         =   "Save"
   End
End
Attribute VB_Name = "frmTracing"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
'      Copyright (c) 1997,1998 BEA Systems, Inc.
'      All rights reserved
'
'      THIS IS UNPUBLISHED PROPRIETARY
'      SOURCE CODE OF BEA Systems, Inc.
'      The copyright notice above does not
'      evidence any actual or intended
'      publication of such source code.
'
' #ident       "@(#) Tests/Clients/Bank1ATM/frmTracing.bas    $Revision: 1.1 $"

' frmTracing.bas : Tracing form for Bank1 example VB ATM client

'
' This form provides a little tracing window to simplify
' the checking of errors and display of error messages.
'

Private Sub cmbLevel_Click()
    traceLevel = cmbLevel.ListIndex
End Sub

Private Sub Form_Load()
    cmbLevel.AddItem "Low", 0
    cmbLevel.AddItem "Medium", 1
    cmbLevel.AddItem "High", 2
    cmbLevel.ListIndex = 1
    traceLevel = cmbLevel.ListIndex
End Sub

Private Sub mnuTraceClear_Click()
    rtbTracing.Text = ""
End Sub

Private Sub mnuTraceExit_Click()
    frmTracing.Visible = False
End Sub
Function checkErr(Message As String, Threshold As TraceValue) As Boolean
    Dim msg As String
    If Err <> 0 Then
        msg = "Method Invocation Failed: " & Message & vbCrLf
        msg = msg + "    Error # " & Str(Err.Number) & " was generated by " & Err.Source & vbCrLf
        msg = msg + "    " & Err.description & vbCrLf
        checkErr = False
        rtbTracing.SelColor = RGB(255, 0, 0)
    Else
        msg = Message & " succeeded" & vbCrLf
        checkErr = True
        rtbTracing.SelColor = RGB(0, 0, 255)
    End If
    
    If Threshold <= traceLevel Then
        rtbTracing.SelStart = Len(rtbTracing.Text)
        rtbTracing.SelText = msg
    End If
    
End Function
Function checkException(Exception As Variant, Message As String, Method As String, Threshold As TraceValue) As Boolean
'
' Function to check an exception return argument for an
' error, display and/or trace an error message, and
' return TRUE if an error occurred.
'
    Dim exceptType As ExceptionType
    Dim msg As String

    'Get the exception type from the object'
    Dim exceptInfo As DIForeignException
    Set exceptInfo = Exception
    exceptType = exceptInfo.EX_majorCode
    
    Select Case exceptType
    
        Case NO_EXCEPTION   'No exception
            'There was no error.  Continue with normal processing
            msg = Message & " Succeeded" & vbCrLf
            rtbTracing.SelColor = RGB(0, 0, 255)
            checkException = False
        
        Case SYSTEM_EXCEPTION   'System Exception
            'For a system exception, the returned variant supports the
            'minorCode and completionStatus properties.
            
            Dim minorCode As Long
            Dim completionStatus As CORBA_CompletionStatus
            Dim completionMsg As String
    
            minorCode = exceptInfo.EX_minorCode
            completionStatus = exceptInfo.EX_completionStatus
            Select Case completionStatus
                Case COMPLETION_NO
                    completionMsg = "No"
                Case COMPLETION_YES
                    completionMsg = "Yes"
                Case COMPLETION_MAYBE
                    completionMsg = "Maybe"
            End Select
            msg = "Method Invocation Failed: " & Message & vbCrLf
            msg = msg & "    CORBA System exception minor code = " & minorCode & vbCrLf
            msg = msg & "    Completion Status = " & completionMsg
            rtbTracing.SelColor = RGB(255, 0, 0)
            checkException = True

        Case USER_EXCEPTION     'User Exception
            'If it is a user exception, the returned variant supports
            'the properties for the defined user exceptions.
            'Here you do your TypeIs checking
            msg = "Method Invocation Failed: " & Message & vbCrLf
            msg = msg & "    User exception: " & exceptInfo.INSTANCE_repositoryId & vbCrLf
            msg = msg & "         was generated by method " & Method & vbCrLf
            rtbTracing.SelColor = RGB(255, 0, 0)
            checkException = True
            
        End Select

    If Threshold <= traceLevel Then
        rtbTracing.SelStart = Len(rtbTracing.Text)
        rtbTracing.SelText = msg
    End If

End Function
Function Trace(Message As String, Threshold As TraceValue)
    If Threshold <= traceLevel Then
        rtbTracing.SelColor = RGB(0, 0, 255)
        rtbTracing.SelStart = Len(rtbTracing.Text)
        rtbTracing.SelText = Message
    End If
End Function
Function Reset()
    rtbTracing.Text = ""
End Function

Private Sub mnuTraceSave_Click()
    CommonDialog1.ShowSave
    rtbTracing.SaveFile CommonDialog1.filename, rtfText
End Sub
