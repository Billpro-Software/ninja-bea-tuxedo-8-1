//	(c) 2003 BEA Systems, Inc. All Rights Reserved. 
//--------------------------------------------------------------------
//
// univp_i.h
//
// Declares the C++ servant implementations for the university
// sample declaration.
//
// Classes declared :
//
//   CourseSynopsisEnumerator_i
//   Registrar_i
//   RegistrarFactory_i
//
// This file was originally generated by using the "-i" idl switch,
// then edited by hand.
//
// BEA Systems Inc. sample code
//
//--------------------------------------------------------------------

#ifndef _univp_i_h
#define _univp_i_h

//--------------------------------------------------------------------

#include <samplesdb.h>
#include "billp_c.h"
#include "univp_s.h"

//--------------------------------------------------------------------

class CourseSynopsisEnumerator_i :
    public POA_UniversityP::CourseSynopsisEnumerator
{
  public:

    CourseSynopsisEnumerator_i(
        Database& db
    );

    virtual ~CourseSynopsisEnumerator_i();

    virtual void destroy();

    virtual void
    activate_object(
        const char* object_id
    );

    virtual UniversityP::CourseSynopsisList*
    get_next_n(
        CORBA::ULong     number_to_get,
        CORBA::ULong_out number_remaining
    );

  private:
     Database&                       m_db;
     UniversityP::CourseSynopsisList m_matches;
     CORBA::ULong                    m_index;
};

//--------------------------------------------------------------------

class Registrar_i :
    public POA_UniversityP::Registrar
{
  public:

    Registrar_i(
        Database&                   db,
        BillingP::TellerFactory_ptr p_tell_fact_ref
    );

    virtual ~Registrar_i();


    virtual UniversityP::CourseSynopsisList*
    get_courses_synopsis(
        const char*                               search_criteria,
        CORBA::ULong                              number_to_get,
        CORBA::ULong_out                          number_remaining,
        UniversityP::CourseSynopsisEnumerator_out rest
    );

    virtual UniversityP::CourseDetailsList*
    get_courses_details(
         const UniversityP::CourseNumberList& courses
    );

    virtual UniversityP::StudentDetails*
    get_student_details(
        UniversityP::StudentId student
    );

    virtual UniversityP::NotRegisteredList*
    register_for_courses(
        UniversityP::StudentId               student,
        const UniversityP::CourseNumberList& courses
    );

  private:
    Database&                   m_db;
    BillingP::TellerFactory_ptr m_p_tell_fact_ref;
};

//--------------------------------------------------------------------

class RegistrarFactory_i :
    public POA_UniversityP::RegistrarFactory
{
  public:
    RegistrarFactory_i();

    virtual ~RegistrarFactory_i();

    virtual UniversityP::Registrar_ptr find_registrar(
        UniversityP::StudentId student
    );
};

//--------------------------------------------------------------------

#endif
