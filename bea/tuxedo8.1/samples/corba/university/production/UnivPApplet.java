/*	(c) 2003 BEA Systems, Inc. All Rights Reserved. */
/**
 *This is the BEA Iceberg sample UniversityApplet.
 *
 */

import java.awt.*;
import java.applet.*;
import java.net.*;
import com.beasys.Tobj.*;
import com.beasys.*;
import org.omg.*;
import UniversityP.*;

public class UnivPApplet extends java.applet.Applet 
{

    UniversityP.CourseSynopsis[] gCourseSynopsis;
    UniversityP.CourseDetails[] gCourseDetailsFromSrvr;
    UniversityP.Registrar gRegistrarObjRef;
    UniversityP.CourseDetails[] gRegisteredCourses;
    UniversityP.StudentDetails gStudentDetails;
    boolean gRegistering = false;
    Tobj_Bootstrap gBootstrapObjRef = null;
    final private static int _TMMAXPASSLEN = 8;
    com.beasys.Tobj.PrincipalAuthenticator gPrinAuthObjRef = null;
    String gUserId = null;
    String gSystemPassword = "";
    String gUserPassword = "";
    org.omg.CosTransactions.Current gTransCur = null;

    // This keeps track of where we are in the Course Details list
    int gCurrentDetailsIndex = -1;

    Color gPurpleColor = new Color(133,2,166); //8716966
    Color gLightGrayColor = new Color(221,221,221);
    Color gGrayColor = new Color(200,200,200);    

    public void init()
    {
        // This code is automatically generated by Visual Cafe when you add
        // components to the visual environment. It instantiates and initializes
        // the components. To modify the code, only use code syntax that matches
        // what Visual Cafe can generate, or Visual Cafe may be unable to back
        // parse your Java file into its visual environment.
        //{{INIT_CONTROLS
		setLayout(null);
		setSize(371,287);
		setBackground(new Color(16777215));
		DetailsPanel = new java.awt.Panel();
		DetailsPanel.setLayout(null);
		DetailsPanel.setVisible(false);
		DetailsPanel.setBounds(408,300,372,264);
		DetailsPanel.setForeground(new Color(-8060250));
		DetailsPanel.setBackground(new Color(12632256));
		add(DetailsPanel);
		DetailsPrevBtn = new java.awt.Button();
		DetailsPrevBtn.setActionCommand("button");
		DetailsPrevBtn.setLabel("Previous");
		DetailsPrevBtn.setBounds(23,227,86,28);
		DetailsPrevBtn.setFont(new Font("Dialog", Font.BOLD, 12));
		DetailsPanel.add(DetailsPrevBtn);
		DetailsNextBtn = new java.awt.Button();
		DetailsNextBtn.setActionCommand("button");
		DetailsNextBtn.setLabel("Next");
		DetailsNextBtn.setBounds(263,227,86,28);
		DetailsNextBtn.setFont(new Font("Dialog", Font.BOLD, 12));
		DetailsPanel.add(DetailsNextBtn);
		DetailsCloseBtn = new java.awt.Button();
		DetailsCloseBtn.setActionCommand("button");
		DetailsCloseBtn.setLabel("Close");
		DetailsCloseBtn.setBounds(155,227,72,28);
		DetailsCloseBtn.setFont(new Font("Dialog", Font.BOLD, 12));
		DetailsPanel.add(DetailsCloseBtn);
		DetailsDescPanel = new java.awt.Panel();
		DetailsDescPanel.setLayout(null);
		DetailsDescPanel.setBounds(11,107,336,108);
		DetailsPanel.add(DetailsDescPanel);
		DetailsDescLabel = new java.awt.Label("Desc:",Label.RIGHT);
		DetailsDescLabel.setBounds(0,4,36,16);
		DetailsDescLabel.setFont(new Font("Dialog", Font.BOLD, 12));
		DetailsDescPanel.add(DetailsDescLabel);
		DetailsDescTextArea = new java.awt.TextArea("",0,48,TextArea.SCROLLBARS_VERTICAL_ONLY);
		DetailsDescTextArea.setEditable(false);
		DetailsDescTextArea.setBounds(48,0,290,108);
		DetailsDescTextArea.setBackground(new Color(-2236963));
		DetailsDescPanel.add(DetailsDescTextArea);
		DetailsInfoPanel = new java.awt.Panel();
		DetailsInfoPanel.setLayout(null);
		DetailsInfoPanel.setBounds(0,12,384,84);
		DetailsInfoPanel.setBackground(new Color(12632256));
		DetailsPanel.add(DetailsInfoPanel);
		DetailsInfoIdLabel = new java.awt.Label("Id:",Label.RIGHT);
		DetailsInfoIdLabel.setBounds(11,-1,36,12);
		DetailsInfoIdLabel.setFont(new Font("Dialog", Font.BOLD, 12));
		DetailsInfoPanel.add(DetailsInfoIdLabel);
		DetailsInfoIdValueLabel = new java.awt.Label("",Label.RIGHT);
		DetailsInfoIdValueLabel.setBounds(59,-1,48,12);
		DetailsInfoIdValueLabel.setFont(new Font("Dialog", Font.PLAIN, 12));
		DetailsInfoIdValueLabel.setBackground(new Color(-2236963));
		DetailsInfoPanel.add(DetailsInfoIdValueLabel);
		DetailsInfoProfessorLabel = new java.awt.Label("Prof:",Label.RIGHT);
		DetailsInfoProfessorLabel.setBounds(131,-1,36,12);
		DetailsInfoProfessorLabel.setFont(new Font("Dialog", Font.BOLD, 12));
		DetailsInfoPanel.add(DetailsInfoProfessorLabel);
		DetailsInfoProfessorValueLabel = new java.awt.Label("");
		DetailsInfoProfessorValueLabel.setBounds(179,-1,168,12);
		DetailsInfoProfessorValueLabel.setFont(new Font("Dialog", Font.PLAIN, 12));
		DetailsInfoProfessorValueLabel.setBackground(new Color(-2236963));
		DetailsInfoPanel.add(DetailsInfoProfessorValueLabel);
		DetailsInfoCreditsLabel = new java.awt.Label("Credits:",Label.RIGHT);
		DetailsInfoCreditsLabel.setBounds(144,48,48,12);
		DetailsInfoCreditsLabel.setFont(new Font("Dialog", Font.BOLD, 12));
		DetailsInfoPanel.add(DetailsInfoCreditsLabel);
		DetailsInfoCreditsValueLabel = new java.awt.Label("",Label.RIGHT);
		DetailsInfoCreditsValueLabel.setBounds(204,47,36,13);
		DetailsInfoCreditsValueLabel.setFont(new Font("Dialog", Font.PLAIN, 12));
		DetailsInfoCreditsValueLabel.setBackground(new Color(-2236963));
		DetailsInfoPanel.add(DetailsInfoCreditsValueLabel);
		DetailsInfoCostLabel = new java.awt.Label("Cost:",Label.RIGHT);
		DetailsInfoCostLabel.setBounds(11,47,36,12);
		DetailsInfoCostLabel.setFont(new Font("Dialog", Font.BOLD, 12));
		DetailsInfoPanel.add(DetailsInfoCostLabel);
		DetailsInfoCostValueLabel = new java.awt.Label("",Label.RIGHT);
		DetailsInfoCostValueLabel.setBounds(59,47,61,13);
		DetailsInfoCostValueLabel.setFont(new Font("Dialog", Font.PLAIN, 12));
		DetailsInfoCostValueLabel.setBackground(new Color(-2236963));
		DetailsInfoPanel.add(DetailsInfoCostValueLabel);
		DetailsInfoOpenLabel = new java.awt.Label("Open:",Label.RIGHT);
		DetailsInfoOpenLabel.setBounds(239,47,48,12);
		DetailsInfoOpenLabel.setFont(new Font("Dialog", Font.BOLD, 12));
		DetailsInfoPanel.add(DetailsInfoOpenLabel);
		DetailsInfoOpenValueLabel = new java.awt.Label("",Label.RIGHT);
		DetailsInfoOpenValueLabel.setBounds(299,47,48,12);
		DetailsInfoOpenValueLabel.setFont(new Font("Dialog", Font.PLAIN, 12));
		DetailsInfoOpenValueLabel.setBackground(new Color(-2236963));
		DetailsInfoPanel.add(DetailsInfoOpenValueLabel);
		DetailsInfoTitleLabel = new java.awt.Label("Title:",Label.RIGHT);
		DetailsInfoTitleLabel.setBounds(11,23,36,12);
		DetailsInfoTitleLabel.setFont(new Font("Dialog", Font.BOLD, 12));
		DetailsInfoPanel.add(DetailsInfoTitleLabel);
		DetailsInfoTitleValueLabel = new java.awt.Label("");
		DetailsInfoTitleValueLabel.setBounds(59,23,288,12);
		DetailsInfoTitleValueLabel.setFont(new Font("Dialog", Font.PLAIN, 12));
		DetailsInfoTitleValueLabel.setBackground(new Color(-2236963));
		DetailsInfoPanel.add(DetailsInfoTitleValueLabel);
		DetailsInfoSchedLabel = new java.awt.Label("Start:");
		DetailsInfoSchedLabel.setBounds(11,71,47,17);
		DetailsInfoSchedLabel.setFont(new Font("Dialog", Font.BOLD, 12));
		DetailsInfoPanel.add(DetailsInfoSchedLabel);
		DetailsInfoSchedTimeLabel = new java.awt.Label("",Label.RIGHT);
		DetailsInfoSchedTimeLabel.setBounds(60,72,36,12);
		DetailsInfoSchedTimeLabel.setBackground(new Color(-2236963));
		DetailsInfoPanel.add(DetailsInfoSchedTimeLabel);
		DetailsInfoMonLabel = new java.awt.Label("Mon",Label.CENTER);
		DetailsInfoMonLabel.setBounds(228,72,24,12);
		DetailsInfoMonLabel.setForeground(new Color(-5592406));
		DetailsInfoMonLabel.setBackground(new Color(-2236963));
		DetailsInfoPanel.add(DetailsInfoMonLabel);
		DetailsInfoTueLabel = new java.awt.Label("Tue",Label.CENTER);
		DetailsInfoTueLabel.setBounds(252,72,24,12);
		DetailsInfoTueLabel.setForeground(new Color(-5592406));
		DetailsInfoTueLabel.setBackground(new Color(-2236963));
		DetailsInfoPanel.add(DetailsInfoTueLabel);
		DetailsInfoWedLabel = new java.awt.Label("Wed",Label.CENTER);
		DetailsInfoWedLabel.setBounds(276,72,24,12);
		DetailsInfoWedLabel.setForeground(new Color(-5592406));
		DetailsInfoWedLabel.setBackground(new Color(-2236963));
		DetailsInfoPanel.add(DetailsInfoWedLabel);
		DetailsInfoThuLabel = new java.awt.Label("Thu",Label.CENTER);
		DetailsInfoThuLabel.setBounds(300,72,24,12);
		DetailsInfoThuLabel.setForeground(new Color(-5592406));
		DetailsInfoThuLabel.setBackground(new Color(-2236963));
		DetailsInfoPanel.add(DetailsInfoThuLabel);
		DetailsInfoFriLabel = new java.awt.Label("Fri",Label.CENTER);
		DetailsInfoFriLabel.setBounds(324,72,24,12);
		DetailsInfoFriLabel.setForeground(new Color(-5592406));
		DetailsInfoFriLabel.setBackground(new Color(-2236963));
		DetailsInfoPanel.add(DetailsInfoFriLabel);
		DetailsInfoDurationValueLabel = new java.awt.Label("",Label.RIGHT);
		DetailsInfoDurationValueLabel.setBounds(180,72,36,12);
		DetailsInfoDurationValueLabel.setBackground(new Color(-2236963));
		DetailsInfoPanel.add(DetailsInfoDurationValueLabel);
		DetailsInfoDurationLabel = new java.awt.Label("Duration:");
		DetailsInfoDurationLabel.setBounds(120,71,59,17);
		DetailsInfoDurationLabel.setFont(new Font("Dialog", Font.BOLD, 12));
		DetailsInfoPanel.add(DetailsInfoDurationLabel);
		StudentPanel = new java.awt.Panel();
		StudentPanel.setLayout(null);
		StudentPanel.setVisible(false);
		StudentPanel.setBounds(384,0,372,264);
		StudentPanel.setForeground(new Color(-8060250));
		StudentPanel.setBackground(new Color(12632256));
		add(StudentPanel);
		StudentInfoPanel = new java.awt.Panel();
		StudentInfoPanel.setLayout(null);
		StudentInfoPanel.setBounds(0,12,250,120);
		StudentInfoPanel.setBackground(new Color(12632256));
		StudentPanel.add(StudentInfoPanel);
		StudentBalLabel = new java.awt.Label("Balance:",Label.RIGHT);
		StudentBalLabel.setBounds(36,60,61,12);
		StudentBalLabel.setFont(new Font("Dialog", Font.BOLD, 12));
		StudentInfoPanel.add(StudentBalLabel);
		StudentBalValLabel = new java.awt.Label("");
		StudentBalValLabel.setBounds(108,60,132,12);
		StudentBalValLabel.setFont(new Font("Dialog", Font.PLAIN, 12));
		StudentBalValLabel.setBackground(new Color(-2236963));
		StudentInfoPanel.add(StudentBalValLabel);
		StudentIdValueLabel = new java.awt.Label("");
		StudentIdValueLabel.setBounds(108,36,132,12);
		StudentIdValueLabel.setFont(new Font("Dialog", Font.PLAIN, 12));
		StudentIdValueLabel.setBackground(new Color(-2236963));
		StudentInfoPanel.add(StudentIdValueLabel);
		StudentIdLabel = new java.awt.Label("Id:",Label.RIGHT);
		StudentIdLabel.setBounds(60,36,36,12);
		StudentIdLabel.setFont(new Font("Dialog", Font.BOLD, 12));
		StudentInfoPanel.add(StudentIdLabel);
		StudentCriteriaLabel = new java.awt.Label("Search String:",Label.RIGHT);
		StudentCriteriaLabel.setBounds(0,84,96,12);
		StudentCriteriaLabel.setFont(new Font("Dialog", Font.BOLD, 12));
		StudentInfoPanel.add(StudentCriteriaLabel);
		StudentCriteriaTextFld = new java.awt.TextField();
		StudentCriteriaTextFld.setBounds(108,84,132,24);
		StudentCriteriaTextFld.setFont(new Font("Dialog", Font.PLAIN, 12));
		StudentInfoPanel.add(StudentCriteriaTextFld);
		StudentNameLabel = new java.awt.Label("Name:",Label.RIGHT);
		StudentNameLabel.setBounds(48,0,48,20);
		StudentNameLabel.setFont(new Font("Dialog", Font.BOLD, 12));
		StudentNameLabel.setForeground(new Color(-8060250));
		StudentInfoPanel.add(StudentNameLabel);
		StudentNameValLabel = new java.awt.Label("");
		StudentNameValLabel.setBounds(108,0,132,20);
		StudentNameValLabel.setFont(new Font("Dialog", Font.PLAIN, 12));
		StudentNameValLabel.setBackground(new Color(-2236963));
		StudentInfoPanel.add(StudentNameValLabel);
		StudentCourseNameLabel = new java.awt.Label("Name",Label.CENTER);
		StudentCourseNameLabel.setBounds(96,132,72,23);
		StudentCourseNameLabel.setFont(new Font("Dialog", Font.BOLD, 12));
		StudentCourseNameLabel.setForeground(new Color(-8060250));
		StudentPanel.add(StudentCourseNameLabel);
		StudentCourseList = new java.awt.List(0,false);
		StudentPanel.add(StudentCourseList);
		StudentCourseList.setBounds(12,156,348,96);
		StudentCourseList.setFont(new Font("Courier", Font.PLAIN, 12));
		StudentCourseList.setBackground(new Color(-2236963));
		StudentCourseNumLabel = new java.awt.Label("Cat #");
		StudentCourseNumLabel.setBounds(24,132,36,23);
		StudentCourseNumLabel.setFont(new Font("Dialog", Font.BOLD, 12));
		StudentCourseNumLabel.setForeground(new Color(-8060250));
		StudentPanel.add(StudentCourseNumLabel);
		StudentBtnPanel = new java.awt.Panel();
		StudentBtnPanel.setLayout(null);
		StudentBtnPanel.setBounds(252,12,108,144);
		StudentPanel.add(StudentBtnPanel);
		StudentSearchCatalogBtn = new java.awt.Button();
		StudentSearchCatalogBtn.setActionCommand("button");
		StudentSearchCatalogBtn.setLabel("Search Catalog");
		StudentSearchCatalogBtn.setBounds(0,0,108,28);
		StudentSearchCatalogBtn.setFont(new Font("Dialog", Font.BOLD, 12));
		StudentSearchCatalogBtn.setForeground(new Color(-8060250));
		StudentBtnPanel.add(StudentSearchCatalogBtn);
		StudentSearchCatalogBtn.setEnabled(false);
		StudentDetailsBtn = new java.awt.Button();
		StudentDetailsBtn.setActionCommand("button");
		StudentDetailsBtn.setLabel("Show Details");
		StudentDetailsBtn.setBounds(0,28,108,28);
		StudentDetailsBtn.setFont(new Font("Dialog", Font.BOLD, 12));
		StudentDetailsBtn.setForeground(new Color(-8060250));
		StudentBtnPanel.add(StudentDetailsBtn);
		StudentDetailsBtn.setEnabled(false);
		StudentRegisterBtn = new java.awt.Button();
		StudentRegisterBtn.setActionCommand("button");
		StudentRegisterBtn.setLabel("Register");
		StudentRegisterBtn.setBounds(0,56,108,28);
		StudentRegisterBtn.setFont(new Font("Dialog", Font.BOLD, 12));
		StudentRegisterBtn.setBackground(new Color(12632256));
		StudentBtnPanel.add(StudentRegisterBtn);
		StudentRegisterBtn.setEnabled(false);
		StudentLogOffBtn = new java.awt.Button();
		StudentLogOffBtn.setActionCommand("button");
		StudentLogOffBtn.setLabel("LogOff");
		StudentLogOffBtn.setBounds(0,112,108,28);
		StudentLogOffBtn.setFont(new Font("Dialog", Font.BOLD, 12));
		StudentLogOffBtn.setBackground(new Color(12632256));
		StudentBtnPanel.add(StudentLogOffBtn);
		StudentRegisteredBtn = new java.awt.Button();
		StudentRegisteredBtn.setActionCommand("button");
		StudentRegisteredBtn.setLabel("Show Registered");
		StudentRegisteredBtn.setBounds(0,84,108,28);
		StudentRegisteredBtn.setFont(new Font("Dialog", Font.BOLD, 12));
		StudentBtnPanel.add(StudentRegisteredBtn);
		StudentRegisteredLabel = new java.awt.Label("Registered",Label.CENTER);
		StudentRegisteredLabel.setBounds(180,132,72,23);
		StudentRegisteredLabel.setFont(new Font("Dialog", Font.BOLD, 12));
		StudentRegisteredLabel.setForeground(new Color(-8060250));
		StudentPanel.add(StudentRegisteredLabel);
		InitializingLabel = new java.awt.Label("Initializing...",Label.CENTER);
		InitializingLabel.setVisible(false);
		InitializingLabel.setBounds(828,300,120,24);
		InitializingLabel.setFont(new Font("Dialog", Font.BOLD, 14));
		InitializingLabel.setForeground(new Color(-8060250));
		add(InitializingLabel);
		LogOnLabel = new java.awt.Label("Logging On...",Label.CENTER);
		LogOnLabel.setVisible(false);
		LogOnLabel.setBounds(828,264,120,24);
		LogOnLabel.setFont(new Font("Dialog", Font.BOLD, 14));
		LogOnLabel.setForeground(new Color(-8060250));
		add(LogOnLabel);
		LogPanel = new java.awt.Panel();
		LogPanel.setLayout(null);
		LogPanel.setBounds(0,0,372,264);
		LogPanel.setForeground(new Color(-8060250));
		LogPanel.setBackground(new Color(12632256));
		add(LogPanel);
		LogStudentIdLabel = new java.awt.Label("Student Id",Label.RIGHT);
		LogStudentIdLabel.setBounds(24,108,120,24);
		LogStudentIdLabel.setFont(new Font("Dialog", Font.BOLD, 14));
		LogStudentIdLabel.setForeground(new Color(-8060250));
		LogPanel.add(LogStudentIdLabel);
		LogOnBtn = new java.awt.Button();
		LogOnBtn.setActionCommand("button");
		LogOnBtn.setLabel("LogOn");
		LogOnBtn.setBounds(143,227,60,28);
		LogOnBtn.setFont(new Font("Dialog", Font.BOLD, 12));
		LogOnBtn.setForeground(new Color(-8060250));
		LogPanel.add(LogOnBtn);
		LogOnBtn.setEnabled(false);
		LogStudentIdTextFld = new java.awt.TextField();
		LogStudentIdTextFld.setBounds(156,108,168,24);
		LogPanel.add(LogStudentIdTextFld);
		LogDomainPassLabel = new java.awt.Label("Domain Password",Label.RIGHT);
		LogDomainPassLabel.setBounds(12,144,132,24);
		LogDomainPassLabel.setFont(new Font("Dialog", Font.BOLD, 14));
		LogDomainPassLabel.setForeground(new Color(-8060250));
		LogPanel.add(LogDomainPassLabel);
		LogDomainPassTextFld = new java.awt.TextField();
		LogDomainPassTextFld.setEchoChar('*');
		LogDomainPassTextFld.setBounds(156,144,168,24);
		LogPanel.add(LogDomainPassTextFld);
		LogStudentPassLabel = new java.awt.Label("Student Password",Label.RIGHT);
		LogStudentPassLabel.setBounds(12,180,132,24);
		LogStudentPassLabel.setFont(new Font("Dialog", Font.BOLD, 14));
		LogStudentPassLabel.setForeground(new Color(-8060250));
		LogPanel.add(LogStudentPassLabel);
		LogStudentPassTextFld = new java.awt.TextField();
		LogStudentPassTextFld.setEchoChar('*');
		LogStudentPassTextFld.setBounds(156,180,168,24);
		LogPanel.add(LogStudentPassTextFld);
		LogWelcomeLabel = new java.awt.Label("Welcome",Label.CENTER);
		LogWelcomeLabel.setBounds(48,12,276,48);
		LogWelcomeLabel.setFont(new Font("Dialog", Font.BOLD, 30));
		LogWelcomeLabel.setForeground(new Color(-8060250));
		LogPanel.add(LogWelcomeLabel);
		LogInvalidPassLabel = new java.awt.Label("Invalid Password!  Please re-enter password",Label.CENTER);
		LogInvalidPassLabel.setBounds(12,72,348,24);
		LogInvalidPassLabel.setFont(new Font("Dialog", Font.BOLD, 12));
		LogInvalidPassLabel.setForeground(new Color(16711680));
		LogPanel.add(LogInvalidPassLabel);
		LogInvalidPassLenLabel = new java.awt.Label("Invalid Length! Enter password with 8 or less chars ",Label.CENTER);
		LogInvalidPassLenLabel.setBounds(12,72,348,24);
		LogInvalidPassLenLabel.setFont(new Font("Dialog", Font.BOLD, 12));
		LogInvalidPassLenLabel.setForeground(new Color(16711680));
		LogPanel.add(LogInvalidPassLenLabel);
		LogNonNumericIdLabel = new java.awt.Label("Non-Numeric Id! Please enter a valid numeric Id",Label.CENTER);
		LogNonNumericIdLabel.setBounds(12,72,348,24);
		LogNonNumericIdLabel.setFont(new Font("Dialog", Font.BOLD, 12));
		LogNonNumericIdLabel.setForeground(new Color(16711680));
		LogPanel.add(LogNonNumericIdLabel);
		LogInvalidIdLabel = new java.awt.Label("Invalid Id! Please enter a valid id",Label.CENTER);
		LogInvalidIdLabel.setBounds(12,72,348,24);
		LogInvalidIdLabel.setFont(new Font("Dialog", Font.BOLD, 12));
		LogInvalidIdLabel.setForeground(new Color(16711680));
		LogPanel.add(LogInvalidIdLabel);
		//}}

        //{{REGISTER_LISTENERS
        SymMouse aSymMouse = new SymMouse();
        StudentSearchCatalogBtn.addMouseListener(aSymMouse);
        StudentRegisterBtn.addMouseListener(aSymMouse);
        DetailsCloseBtn.addMouseListener(aSymMouse);
        DetailsNextBtn.addMouseListener(aSymMouse);
        DetailsPrevBtn.addMouseListener(aSymMouse);
        SymAction lSymAction = new SymAction();
        SymText lSymText = new SymText();
        StudentCriteriaTextFld.addTextListener(lSymText);
        SymItem lSymItem = new SymItem();
        StudentCourseList.addItemListener(lSymItem);
        StudentCriteriaTextFld.addActionListener(lSymAction);
        StudentDetailsBtn.addMouseListener(aSymMouse);
        StudentDetailsBtn.addActionListener(lSymAction);
        SymKey aSymKey = new SymKey();
        StudentSearchCatalogBtn.addKeyListener(aSymKey);
        StudentRegisterBtn.addKeyListener(aSymKey);
        StudentRegisterBtn.addActionListener(lSymAction);
        DetailsNextBtn.addKeyListener(aSymKey);
        DetailsPrevBtn.addKeyListener(aSymKey);
        DetailsCloseBtn.addKeyListener(aSymKey);
        LogOnBtn.addMouseListener(aSymMouse);
        LogOnBtn.addKeyListener(aSymKey);
        LogStudentIdTextFld.addTextListener(lSymText);
        LogDomainPassTextFld.addTextListener(lSymText);
        LogStudentPassTextFld.addTextListener(lSymText);
        StudentLogOffBtn.addMouseListener(aSymMouse);
        StudentRegisteredBtn.addMouseListener(aSymMouse);
        StudentRegisteredBtn.addKeyListener(aSymKey);
        //}}

        StudentCourseList.setMultipleMode(true);
        StudentCourseList.setForeground(gPurpleColor);
        StudentPanel.setVisible(false);
        DetailsPanel.setVisible(false);
        LogInvalidPassLabel.setVisible(false);
        LogInvalidPassLenLabel.setVisible(false);
        LogInvalidIdLabel.setVisible(false);
        LogNonNumericIdLabel.setVisible(false);
        LogPanel.setVisible(false);

        // Display something
        InitializingLabel.setLocation(120,120);
        InitializingLabel.setVisible(true);


        try
        {
            // Initialize ORB
            org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init(this,null);

            int    port = Integer.parseInt(getParameter("port"));
            String svr = get_default_server();
            if ((svr == null) || (svr.length() == 0))
                svr = getParameter("host");
            String TuxFormatHost = "//" + svr + ':' + port;


            // Create Bootstrap object
            gBootstrapObjRef = new Tobj_Bootstrap(orb, TuxFormatHost);

            // Setup Security
            // Get the Security Current Object
            org.omg.CORBA.Object secCurObj =
                            gBootstrapObjRef.resolve_initial_references("SecurityCurrent");
            org.omg.SecurityLevel2.Current secCur =
                org.omg.SecurityLevel2.CurrentHelper.narrow(secCurObj);

            // Get a principalauthenticator
            org.omg.SecurityLevel2.PrincipalAuthenticator authlev2 =
                secCur.principal_authenticator();

            gPrinAuthObjRef = (com.beasys.Tobj.PrincipalAuthenticator)
                org.omg.SecurityLevel2.PrincipalAuthenticatorHelper.narrow(authlev2);

            // Get the auth type
            com.beasys.Tobj.AuthType authType = gPrinAuthObjRef.get_auth_type();

            // Set args according to security level
            switch (authType.value())
            {
                case com.beasys.Tobj.AuthType._TOBJ_NOAUTH:
                    // No passwords need so make all password fields invisible
                    LogDomainPassLabel.setVisible(false);
                    LogDomainPassTextFld.setVisible(false);
                    LogStudentPassLabel.setVisible(false);
                    LogStudentPassTextFld.setVisible(false);
                    break;

                case com.beasys.Tobj.AuthType._TOBJ_SYSAUTH:
                    // Just need a domain password, hide the system
                    // password prompt field
                    LogStudentPassLabel.setVisible(false);
                    LogStudentPassTextFld.setVisible(false);
                    break;

                case com.beasys.Tobj.AuthType._TOBJ_APPAUTH:
                    // Prompt for all passwords, don't have to hide anything
                    break;
                    }
            InitializingLabel.setVisible(false);
            LogPanel.setLocation(1,1);
            LogPanel.setVisible(true);
        }
        catch(com.beasys.Tobj.InvalidName e)
        {
            System.err.println("Invalid name: " + e);
            System.exit(1);
        }
        catch(com.beasys.Tobj.InvalidDomain e)
        {
            System.err.println("Invalid Domain " + e);
            System.err.println("Make sure that the university_server is running.");
            System.exit(1);
        }
        catch(org.omg.CORBA.SystemException e)
        {
            System.err.println("System exception " + e);
            System.exit(1);
        }
    }

    void log_on ()
    {
        byte[] userData = new byte[0];
        String clientName = "university_client";
            

        LogPanel.setVisible(false);
        LogOnLabel.setLocation(120,120);
        LogOnLabel.setVisible(true);
        
        gUserId = LogStudentIdTextFld.getText();
        try
        {
            int check_id = Integer.parseInt(gUserId);
        }
        catch (java.lang.NumberFormatException e)
        {
            // Need to enter a number for a student id
            LogOnLabel.setVisible(false);
            clearLogWarningLabels();
            LogNonNumericIdLabel.setVisible(true);
            LogPanel.setLocation(1,1);
            LogPanel.setVisible(true);
            return;
        }
        gSystemPassword = LogDomainPassTextFld.getText();
        if ( gSystemPassword.length() > _TMMAXPASSLEN)
        {
            LogOnLabel.setVisible(false);
            clearLogWarningLabels();
            LogInvalidPassLenLabel.setVisible(true);
            LogPanel.setLocation(1,1);
            LogPanel.setVisible(true);
            return;
        }
        gUserPassword = LogStudentPassTextFld.getText();

        try
        {
            // Perform Tux style logon
            org.omg.Security.AuthenticationStatus status = 
            gPrinAuthObjRef.logon(gUserId, clientName, gSystemPassword,
                        gUserPassword, userData);
            if (status.value() == org.omg.Security.AuthenticationStatus._SecAuthSuccess)
            {
                // We were able to log in
                try
                {
                    // Resolve Factory Finder
                    org.omg.CORBA.Object Off =
                        gBootstrapObjRef.resolve_initial_references("FactoryFinder");
                    showStatus("Obtained Factory Finder ObjRef from Bootstrap Object");
                    FactoryFinder Ff = FactoryFinderHelper.narrow(Off);
      
                    // Find Factory by id
                    org.omg.CORBA.Object Of =
                        Ff.find_one_factory_by_id(UniversityP.RegistrarFactoryHelper.id());
                    UniversityP.RegistrarFactory F = UniversityP.RegistrarFactoryHelper.narrow(Of);
                    showStatus("Obtained RegistrarFactoryObjRef from FactoryFinder");

                    // Ask the "RegistrarFactory" to create a Registrar object
                    int student_id = Integer.parseInt (gUserId.toString());
                    gRegistrarObjRef = F.find_registrar(student_id);
                    showStatus("Obtained Registrar ObjRef from Registrar Factory");
                    if (gRegistrarObjRef == null)
                    {
                        System.err.println("factory returned nil");
                        System.exit(1);
                    }

                    if (!getStudentDetails())
                    {
                        showStatus("Invalid Student Id");

                        // We logged in but have the wrong id so log off and
                        // have them try again
                        try
                        {
                            // log off the system
                            gPrinAuthObjRef.logoff();
                        }
                        catch (org.omg.CORBA.SystemException se)
                        {
                            System.err.println("CORBA Exception  " + se);
                            System.exit(1);
                        }
                        LogOnLabel.setVisible(false);
                        clearLogWarningLabels();
                        LogInvalidIdLabel.setVisible(true);
                        LogPanel.setLocation(1,1);
                        LogPanel.setVisible(true);
                        return;
                    }
                    updateStudentName();
                    updateStudentBalance();

                    // Okay, put up the student information panel
                    StudentPanel.setLocation(1,1);
                    StudentIdValueLabel.setText(gUserId);
                    StudentPanel.setVisible(true);
                }
                catch(org.omg.CosLifeCycle.NoFactory e)
                {
                    System.err.println("No factory " + e);
                    System.exit(1);
                }
                catch(com.beasys.Tobj.InvalidName e)
                {
                    System.err.println("Invalid name: " + e);
                    System.exit(1);
                }
                catch(com.beasys.Tobj.CannotProceed e)
                {
                    System.err.println("Cannot proceed: "+ e);
                    System.exit(1);
                }
                catch(com.beasys.Tobj.RegistrarNotAvailable e)
                {
                    System.err.println("No Registrar " + e);
                    System.exit(1);
                }
                catch(org.omg.CORBA.SystemException e)
                {
                    System.err.println("System exception " + e);
                    System.exit(1);
                }

                try
                {
                    // Get the Transaction Current Object
                    org.omg.CORBA.Object transCurObj = gBootstrapObjRef.resolve_initial_references(
                                "TransactionCurrent");
                    showStatus("Obtained Transaction Current ObjRef from Bootstrap Object");
                    gTransCur = org.omg.CosTransactions.CurrentHelper.narrow(transCurObj);
                }
                catch(com.beasys.Tobj.InvalidName e)
                   {
                    System.err.println("Invalid name: " + e);
                    System.exit(1);
                }
            }
            else
            {
                // We were not able to log in, have them try
                // again
                LogOnLabel.setVisible(false);
                clearLogWarningLabels();
                LogInvalidPassLabel.setVisible(true);
                LogPanel.setLocation(1,1);
                LogPanel.setVisible(true);
            }

            
        }
        catch(org.omg.CORBA.SystemException e)
        {
            System.err.println("System exception " + e);
            System.exit(1);
        }

    }

    void clearLogWarningLabels()
    {
        LogInvalidPassLabel.setVisible(false);
        LogInvalidPassLenLabel.setVisible(false);
        LogInvalidIdLabel.setVisible(false);
        LogNonNumericIdLabel.setVisible(false);
    }

    void log_off()
    {
        try
        {
            // log off the system
            gPrinAuthObjRef.logoff();
        }
        catch (org.omg.CORBA.SystemException e)
        {
            System.err.println("CORBA Exception  " + e);
        }
        System.exit(0);  
    }
    
    String get_default_server()
    {
        URL    u = getDocumentBase();
        return u.getHost();
    }


        //{{DECLARE_CONTROLS
	java.awt.Panel DetailsPanel;
	java.awt.Button DetailsPrevBtn;
	java.awt.Button DetailsNextBtn;
	java.awt.Button DetailsCloseBtn;
	java.awt.Panel DetailsDescPanel;
	java.awt.Label DetailsDescLabel;
	java.awt.TextArea DetailsDescTextArea;
	java.awt.Panel DetailsInfoPanel;
	java.awt.Label DetailsInfoIdLabel;
	java.awt.Label DetailsInfoIdValueLabel;
	java.awt.Label DetailsInfoProfessorLabel;
	java.awt.Label DetailsInfoProfessorValueLabel;
	java.awt.Label DetailsInfoCreditsLabel;
	java.awt.Label DetailsInfoCreditsValueLabel;
	java.awt.Label DetailsInfoCostLabel;
	java.awt.Label DetailsInfoCostValueLabel;
	java.awt.Label DetailsInfoOpenLabel;
	java.awt.Label DetailsInfoOpenValueLabel;
	java.awt.Label DetailsInfoTitleLabel;
	java.awt.Label DetailsInfoTitleValueLabel;
	java.awt.Label DetailsInfoSchedLabel;
	java.awt.Label DetailsInfoSchedTimeLabel;
	java.awt.Label DetailsInfoMonLabel;
	java.awt.Label DetailsInfoTueLabel;
	java.awt.Label DetailsInfoWedLabel;
	java.awt.Label DetailsInfoThuLabel;
	java.awt.Label DetailsInfoFriLabel;
	java.awt.Label DetailsInfoDurationValueLabel;
	java.awt.Label DetailsInfoDurationLabel;
	java.awt.Panel StudentPanel;
	java.awt.Panel StudentInfoPanel;
	java.awt.Label StudentBalLabel;
	java.awt.Label StudentBalValLabel;
	java.awt.Label StudentIdValueLabel;
	java.awt.Label StudentIdLabel;
	java.awt.Label StudentCriteriaLabel;
	java.awt.TextField StudentCriteriaTextFld;
	java.awt.Label StudentNameLabel;
	java.awt.Label StudentNameValLabel;
	java.awt.Label StudentCourseNameLabel;
	java.awt.List StudentCourseList;
	java.awt.Label StudentCourseNumLabel;
	java.awt.Panel StudentBtnPanel;
	java.awt.Button StudentSearchCatalogBtn;
	java.awt.Button StudentDetailsBtn;
	java.awt.Button StudentRegisterBtn;
	java.awt.Button StudentLogOffBtn;
	java.awt.Button StudentRegisteredBtn;
	java.awt.Label StudentRegisteredLabel;
	java.awt.Label InitializingLabel;
	java.awt.Label LogOnLabel;
	java.awt.Panel LogPanel;
	java.awt.Label LogStudentIdLabel;
	java.awt.Button LogOnBtn;
	java.awt.TextField LogStudentIdTextFld;
	java.awt.Label LogDomainPassLabel;
	java.awt.TextField LogDomainPassTextFld;
	java.awt.Label LogStudentPassLabel;
	java.awt.TextField LogStudentPassTextFld;
	java.awt.Label LogWelcomeLabel;
	java.awt.Label LogInvalidPassLabel;
	java.awt.Label LogInvalidPassLenLabel;
	java.awt.Label LogNonNumericIdLabel;
	java.awt.Label LogInvalidIdLabel;
	//}}

    class SymMouse extends java.awt.event.MouseAdapter
    {
        public void mousePressed(java.awt.event.MouseEvent event)
        {
            Object object = event.getSource();
            if (object == StudentLogOffBtn)
                StudentLogOffBtn_MousePress(event);
        }

        public void mouseExited(java.awt.event.MouseEvent event)
        {
            Object object = event.getSource();
            if (object == DetailsPrevBtn)
                showStatus("");
            else if (object == DetailsNextBtn)
                showStatus("");
            else if (object == DetailsCloseBtn)
                showStatus("");
            else if (object == StudentDetailsBtn)
                showStatus("");
            else if (object == StudentSearchCatalogBtn)
                showStatus("");
            else if (object == StudentRegisterBtn)
                showStatus("");
            else if (object == StudentRegisteredBtn)
                showStatus("");
            else if (object == StudentLogOffBtn)
                showStatus("");
            else if (object == LogOnBtn)
                showStatus("");
        }

        public void mouseEntered(java.awt.event.MouseEvent event)
        {
            Object object = event.getSource();
            if (object == DetailsPrevBtn)
                showStatus("Show details for previous course");
            else if (object == DetailsNextBtn)
                showStatus("Show details for next course");
            else if (object == DetailsCloseBtn)
                showStatus("Go back to Course Synopsis screen");
            else if (object == StudentDetailsBtn)
                showStatus("Show details for selected courses");
            else if (object == StudentSearchCatalogBtn)
                showStatus("Show synopsis for courses matching criteria");
            else if (object == StudentRegisterBtn)
                showStatus("Register for selected courses");
            else if (object == StudentLogOffBtn)
                showStatus("Exit the applet");
            else if (object == LogOnBtn)
                showStatus("Attempt to Log On using supplied id and password");
            else if (object == StudentRegisteredBtn)
                showStatus("Show Courses student is registered for");
        }

        public void mouseClicked(java.awt.event.MouseEvent event)
        {
            Object object = event.getSource();
            if (object == StudentSearchCatalogBtn)
                StudentSearchCatalogBtn_MouseClick(event);
            else if (object == StudentRegisterBtn)
                StudentRegisterBtn_MouseClick(event);
            else if (object == StudentDetailsBtn)
                StudentDetailsBtn_MouseClick(event);
            else if (object == DetailsCloseBtn)
                DetailsPanelCloseButton_MouseClick(event);
            else if (object == DetailsNextBtn)
                NextButton_MouseClick(event);
            else if (object == DetailsPrevBtn)
                PrevButton_MouseClick(event);
            else if (object == LogOnBtn)
                LogOnButton_MouseClick(event);
            else if (object == StudentRegisteredBtn)
                StudentRegisteredBtn_MouseClick(event);

        }
    }

    void StudentSearchCatalogBtn_MouseClick(java.awt.event.MouseEvent event)
    {
        showSynopsisList();
    }
    
    void StudentRegisterBtn_MouseClick(java.awt.event.MouseEvent event)
    {
        if (StudentRegisterBtn.isEnabled())
           registerSynopsisList();
    }

    void StudentRegisteredBtn_MouseClick(java.awt.event.MouseEvent event)
    {
        StudentDetailsBtn.setEnabled(false);
        StudentRegisterBtn.setEnabled(false);
        showStudentRegistered();
    }


    class SymAction implements java.awt.event.ActionListener
    {
        public void actionPerformed(java.awt.event.ActionEvent event)
        {
            Object object = event.getSource();
            if (object == StudentCriteriaTextFld)
                StudentCriteriaTextFld_EnterHit(event);
        }
    }


    class SymText implements java.awt.event.TextListener
    {
        public void textValueChanged(java.awt.event.TextEvent event)
        {
            Object object = event.getSource();
            if (object == StudentCriteriaTextFld)
                    StudentCriteriaTextFld_TextValueChanged(event);
            else if (object == LogStudentIdTextFld)
                    LogStudentIdTextFld_TextValueChanged(event);
            else if (object == LogDomainPassTextFld)
                    LogDomainPassTextFld_TextValueChanged(event);
            else if (object == LogStudentPassTextFld)
                    LogStudentPassTextFld_TextValueChanged(event);
        }
    }

    void StudentCriteriaTextFld_TextValueChanged(java.awt.event.TextEvent event)
    {
        StudentSearchCatalogBtn.setEnabled(StudentCriteriaTextFld.getText().length() != 0);
    }

    void LogStudentIdTextFld_TextValueChanged(java.awt.event.TextEvent event)
    {
        LogOnBtn.setEnabled(LogStudentIdTextFld.getText().length() != 0);
    }

    void LogDomainPassTextFld_TextValueChanged(java.awt.event.TextEvent event)
    {
        LogOnBtn.setEnabled(LogDomainPassTextFld.getText().length() != 0);
    }

    void LogStudentPassTextFld_TextValueChanged(java.awt.event.TextEvent event)
    {
        LogOnBtn.setEnabled(LogStudentPassTextFld.getText().length() != 0);
    }

    class SymItem implements java.awt.event.ItemListener
    {
        public void itemStateChanged(java.awt.event.ItemEvent event)
        {
            Object object = event.getSource();
            if (object == StudentCourseList)
                    CourseSynopsisList_ItemStateChanged(event);
        }
    }

    void CourseSynopsisList_ItemStateChanged(java.awt.event.ItemEvent event)
    {
        int selected[] = StudentCourseList.getSelectedIndexes();
        if (selected.length != 0)
        {
            StudentDetailsBtn.setEnabled(true);

            boolean already_registered = false;
            for (int index = 0; index < selected.length; index++)
            {
                if (StudentCourseList.getItem(selected[index]).endsWith("-yes-"))
                    already_registered = true;                    
            }
            
            if (!gRegistering && !already_registered)
                StudentRegisterBtn.setEnabled(true);
            else
                StudentRegisterBtn.setEnabled(false);
        }
        else
        {
            StudentDetailsBtn.setEnabled(false);
            StudentRegisterBtn.setEnabled(false);
        }
    }



    class SymKey extends java.awt.event.KeyAdapter
    {
        public void keyPressed(java.awt.event.KeyEvent event)
        {
            // We want to trap if they hit the enter key while focus is
            // on a button
            if ( event.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER)
            {
                Object object = event.getSource();
                if (object == StudentSearchCatalogBtn)
                    StudentSearchCatalogBtn_KeyPress(event);
                else if (object == DetailsNextBtn)
                    DetailsNextBtn_KeyPress(event);
                else if (object == DetailsPrevBtn)
                    DetailsPrevBtn_KeyPress(event);
                else if (object == DetailsCloseBtn)
                    DetailsCloseBtn_KeyPress(event);
                else if (object == LogOnBtn)
                    LogOnButton_KeyPress(event);
            }
        }
    }

    void StudentSearchCatalogBtn_KeyPress(java.awt.event.KeyEvent event)
    {
        showSynopsisList();
    }

    void StudentCriteriaTextFld_EnterHit(java.awt.event.ActionEvent event)
    {
        showSynopsisList();
    }

    void StudentDetailsBtn_MouseClick(java.awt.event.MouseEvent event)
    {
        showDetails();
    }

    void showSynopsisList()
    {
        fillCourseSynopsisList();
        StudentCourseList.setEnabled(true);
        StudentDetailsBtn.setEnabled(false);
    }

    
    /*
     * Fills in the visual course synopsis list based on the search
     * criteria string entered by the user.  A call is made to
     * getCourseSynopsisFromServer which interacts with the 
     * server to return a list of course synopsis
     *
     */
    void fillCourseSynopsisList()
    {
        boolean is_registered = false;
        String search_string = StudentCriteriaTextFld.getText();

        StudentCourseList.setVisible(false);
        StudentCourseList.setEnabled(false);
        StudentCourseList.removeAll();
        int row = 0;

        gRegistering = false;

        UniversityP.CourseSynopsis[] course_synopsis =
                                getCourseSynopsisFromServer( search_string);

        UniversityP.CourseDetails[] registered_courses =
                                getRegisteredCoursesFromServer( Integer.parseInt (gUserId.toString()));

        // If we got something back
        if (course_synopsis != null)
        {
            // add them to the CourseList
            boolean registered = false;
            for (int index = 0; index < course_synopsis.length; index++)
            {
                // See if they're registered for this course
                for ( int r_index = 0; r_index < registered_courses.length; r_index++)
                {
                    if (registered_courses[r_index].course_number == course_synopsis[index].course_number)                                    
                    {
                        registered = true;
                        is_registered = true;
                        break;
                    }
                }

                Integer course_number = new Integer(course_synopsis[index].course_number);
                if (registered)
                {
                    int padding = 20 - course_synopsis[index].title.length();
                    String padding_spaces = "";
                    for (int i = 0; i < padding; i++)
                    {
                        padding_spaces = padding_spaces + " ";
                    }
                    StudentCourseList.add( course_number.toString() +
                                    " " +
                                    course_synopsis[index].title +
                                    padding_spaces +
                                    "-yes-");
                }
                else
                {
                    StudentCourseList.add( course_number.toString() +
                                    " " +
                                    course_synopsis[index].title);
                }

                registered = false;
            }
        }

        StudentCourseList.setVisible(true);
        StudentCourseList.setEnabled(true);
    }


    
    /**
     * Gets the course synopsis from the server in chunks using an
     * enumerator as necessary.
     *
     * @param aCriteria     The search criteria entered by the user. This
     *                      criteria is used to selected which courses
     *                      should have a synopsis displayed.
     *
     * @return UniversityP.CourseSynopsis[] An array of UniversityP.CourseSynopsis
     *                      returned by the server.
     *
     */
    UniversityP.CourseSynopsis[] getCourseSynopsisFromServer( String aCriteria)
    {

        UniversityP.CourseSynopsis[] course_synopsis_chunks = null;
        UniversityP.CourseSynopsis[] chunk_course_synopsis_from_server = null;
        final int CHUNK_SIZE = 10;
        int total_fetched = 0;
        int num_to_fetch = 0;

        org.omg.CORBA.IntHolder number_remaining = new org.omg.CORBA.IntHolder();
        UniversityP.CourseSynopsisEnumeratorHolder enumerate_the_rest =
                        new UniversityP.CourseSynopsisEnumeratorHolder();

        try
        {
            // Do the invoke on the Registrar object to get the
            // courses from the server
            chunk_course_synopsis_from_server =
                        gRegistrarObjRef.get_courses_synopsis(
                                                aCriteria,
                                                CHUNK_SIZE,
                                                number_remaining,
                                                enumerate_the_rest);

            
            num_to_fetch = number_remaining.value;

            // This is the array for our first chunk of course synopsis
            course_synopsis_chunks =
                          new UniversityP.CourseSynopsis[chunk_course_synopsis_from_server.length];

            total_fetched = chunk_course_synopsis_from_server.length;
            showStatus("Obtained " + total_fetched + " Course Synopsis from server");


            // Save the first chunk of course synopsis
            for (int index = 0;index < chunk_course_synopsis_from_server.length; index++)
            {
                course_synopsis_chunks[index] =
                                    chunk_course_synopsis_from_server[index];
            }

        }
        catch(org.omg.CORBA.SystemException cse)
        {
            System.err.println(cse);
            System.err.println("Failed getting the course synopsis from the server");
        }

        try
        {
            // As long as there are more chunks to fetch from the server
            while (num_to_fetch != 0)
            {

                // Get the next chunk
                chunk_course_synopsis_from_server =
                        enumerate_the_rest.value.get_next_n(CHUNK_SIZE, number_remaining);

                num_to_fetch = number_remaining.value;
                
                total_fetched = total_fetched +
                                        chunk_course_synopsis_from_server.length;
                showStatus("Obtained " + total_fetched + " Course Synopsis from server");

                // we already have a least one chunk so we have to allocate
                // a new array that can contain the existing chunks and the
                // chunk we just got.

                // Figure out how big our new chunks length will need to be
                int new_chunks_length = course_synopsis_chunks.length +
                                        chunk_course_synopsis_from_server.length;

                // Allocate a new array big enough to hold the chunks we had
                // and the new chunk we just fetched
                UniversityP.CourseSynopsis[] temp_course_synopsis_chunks =
                          new UniversityP.CourseSynopsis[new_chunks_length];

                int index = 0;
                // copy the chunks we already had into the new array
                for (;index < course_synopsis_chunks.length; index++)
                {
                    temp_course_synopsis_chunks[index] =
                                course_synopsis_chunks[index];
                }

                // Okay, we've grabbed our existing chunks, now add the chunk
                // we just got from the server
                for (int j = 0;index < new_chunks_length; index++, j++)
                {
                    temp_course_synopsis_chunks[index] = new UniversityP.CourseSynopsis(
                                chunk_course_synopsis_from_server[j].course_number,
                                chunk_course_synopsis_from_server[j].title);
       
                }

                // We want course_synopsis_chunks to be our official
                // chunks array
                course_synopsis_chunks = temp_course_synopsis_chunks;

                // All done with this temporary one
                temp_course_synopsis_chunks = null;
            } // while
        } // try
        catch(org.omg.CORBA.SystemException cse)
        {
            System.err.println(cse);
            System.err.println("Failed getting the course synopsis from the server");
        }

        // Save away the chunks array we created
        gCourseSynopsis = course_synopsis_chunks;

        // Tell the server it can get rid of the enumerator
        if (enumerate_the_rest.value != null)
            enumerate_the_rest.value.destroy();

        // Done with this local chunk array
        chunk_course_synopsis_from_server = null;

        return gCourseSynopsis;
    }


    
    /**
     * Creates a list of course numbers and then calls
     * getCourseDetailsFromServer() to actually go off and
     * get the course details from the server.
     */
    void showDetails()
    {
        if (StudentDetailsBtn.isEnabled())
           if (!gRegistering)
              showSynopsisDetails();
           else
              showRegisteredDetails();
       
    }


    /**
     * Figures out which courses the user has selected in the
     * visible course synopsis list.
     */
    int[] getSelectedCourses()
    {
        // At the onset we don't know how many courses were selected by
        // the user, so we create an array equal in size to the array
        // of course synopsis and then figure out how many courses were
        // actually selected in order to pass an array exactly equal
        // in size to the number selected.

        int[] big_selected_course_numbers = new int[gCourseSynopsis.length];
        for (int index = 0; index < gCourseSynopsis.length; index++)
            big_selected_course_numbers[index] = 0;

        // Loop through the array of CourseSynopsis objects
        int num_visible = 0;
        int index_selected = 0;
        for (int index = 0; index < gCourseSynopsis.length; index++)
        {
            // We've got a CourseSynopsis object that was put in the
            // CourseSynopsisList
            if (StudentCourseList.isIndexSelected( num_visible))
            {
                // and, it was selected by the user so add it to the
                // details frame
                big_selected_course_numbers[index_selected] = (gCourseSynopsis[index]).course_number;
                index_selected++;
            }
            num_visible++;
        }

        // Unfortunately, we created the selected_course_numbers array based
        // on the size of the gCourseSynopsis array. Unless the
        // user selected all of the courses we'll have some null entries in the
        // array. These nulls will make life complicated later on so we need
        // to do the equivalent of a realloc() here.  It shouldn't be too
        // much of a performance hit.

        int count = 0;
        for (; count < big_selected_course_numbers.length; count++)
        {
            if (big_selected_course_numbers[count] == 0)
                // If this isn't an integer it is a 0 which means we're
                // done
                break;
        }

        // OK we know how many (non-null) entries  we have
        int[] selected_course_numbers = new int[count];

        //Make a new array with no nulls in it
        for (int index = 0; index < count; index++)
        {
           selected_course_numbers[index] = big_selected_course_numbers[index];
        }

        return selected_course_numbers;
    }
    

    /**
     * Figures out which courses the user has selected in the
     * visible course synopsis list, creates a list of course numbers
     * and then calls getCourseDetailsFromServer() to actually go off and
     * get the course details from the server.
     */
    void showSynopsisDetails()
    {
        int[] selected_course_numbers = getSelectedCourses();
        if (selected_course_numbers.length < 1)
        {
            showStatus("Nothing selected");
            return;
        }
        
        getCourseDetailsFromServer( selected_course_numbers );

        StudentPanel.setVisible(false);
        // We have it elsewhere so we can debug it in a Dev Env
        // at run time we move it to where it should be
        DetailsPanel.setLocation(1,1);
        DetailsPanel.setVisible(true);
    }


    
    /**
     * Creates a list of course numbers and then invokes
     * register_for_courses() to actually go off and
     * get the course details from the server.
     */
    void registerSynopsisList()
    {
        int[] selected_course_numbers = getSelectedCourses();
        if (selected_course_numbers.length < 1)
        {
            showStatus("Nothing selected");
            return;
        }
        
        int student_id = Integer.parseInt (gUserId.toString());

        UniversityP.NotRegistered[] not_registered = null;
    
        try {
            gTransCur.begin();
            // Do the invoke on the Register object to register for the courses
            not_registered = gRegistrarObjRef.register_for_courses(student_id,
                     selected_course_numbers);    
            boolean prevent_commit = false;
            if (not_registered != null)
            {
                if (not_registered.length > 0 )
                {
                    System.out.println("Not Registered condition detected: ");
                    for (int i = 0 ; i < not_registered.length; i++)
                    {
                        System.out.println("Course number = "+ not_registered[i].course_number);
                        System.out.println("Not Registered Reason = "
                                 + not_registered[i].not_registered_reason);
                    }
                    prevent_commit = true;
                }        
            }

            if (!prevent_commit)
            {
                boolean report_heuristics = true;
                gTransCur.commit(report_heuristics);
                getStudentDetails();
                updateStudentName();
                updateStudentBalance();
                showStudentRegistered();
            }
             else
             {
                gTransCur.rollback();
                try { Thread.sleep(3 * 1000); } // 3 seconds 
                catch (InterruptedException e) {}
            }    
        }
        catch(UniversityP.TooManyCredits e)
        {
            System.err.println("TooManyCredits: " + e);
            showStatus("Too Many Credits: cannot have more than " + e.maximum_credits + " !!!");
            try
            {
                gTransCur.rollback();
            }
            catch(org.omg.CosTransactions.NoTransaction nte)
            {
                System.err.println("NoTransaction: " + nte);
                System.exit(1);
            }
        }
        catch(UniversityP.DelinquentAccount e)
        {
            System.err.println("DelinquentAccount: " + e);
            showStatus("Delinquent Account !!!");
            try
            {
                gTransCur.rollback();
            }
            catch(org.omg.CosTransactions.NoTransaction nte)
            {
                System.err.println("NoTransaction: " + nte);
                System.exit(1);
            }
        }

        catch(org.omg.CosTransactions.NoTransaction nte)
        {
            System.err.println("NoTransaction: " + nte);
            System.exit(1);
        }
        catch(org.omg.CosTransactions.SubtransactionsUnavailable e)
        {
            System.err.println("Subtransactions Unavailable: " + e);
               System.exit(1);
        }
        catch(org.omg.CosTransactions.HeuristicHazard e)
        {
               System.err.println("HeuristicHazard: " + e);
               System.exit(1);
        }
        catch(org.omg.CosTransactions.HeuristicMixed e)
        {
               System.err.println("HeuristicMixed: " + e);
               System.exit(1);
        }        
        
    }

    


    /**
     * Puts up the details panel to show details on registered courses
     */
    void showRegisteredDetails()
    {
        // We're at the first course in the details list
        gCurrentDetailsIndex = 0;

        // Display the details for the first registered
        // course
        fillDetailsPanel( gRegisteredCourses[0] );

        // We know that there won't be any previous courses to start since
        // we're starting at the first course
        DetailsPrevBtn.setEnabled(false);

        // We want to make sure that the Next button is set correctly
        // when we show the details for the first course the user selected.
        if (gRegisteredCourses.length > 1)
            DetailsNextBtn.setEnabled(true);
        else
            DetailsNextBtn.setEnabled(false);

        StudentPanel.setVisible(false);
        // We have it elsewhere so we can debug it in a Dev Env
        // at run time we move it to where it should be
        DetailsPanel.setLocation(1,1);
        DetailsPanel.setVisible(true);
    }

    
    
    
    /**
     * Figures out how to obtain chunks of Course Details from
     * the server and then does it.  We do it in chunks so that we don't
     * stress the Java Orb and get marshalling errors.
     *
     * @param aSelectedCourseNumbers    An array of ints containing
     *                              the course numbers of the course
     *                              synopsis that the user selected.
     *
     */
    void getCourseDetailsFromServer( int[] aSelectedCourseNumbers)
    {
        // Contains the last chunk we got from the server
        UniversityP.CourseDetails[] chunk_details_from_server = null;

        // Contains all the chunks we've gotten
        UniversityP.CourseDetails[] chunks_in_hand = null;

        // The size of a normal "full" chunk.
        final int CHUNK_SIZE = 5;

        // Number of courses about which the user wanted details
        int total_selected = aSelectedCourseNumbers.length;

        // Figure out how many chunks we will need to get
        int chunks_to_get = (total_selected/CHUNK_SIZE) + 1;
        int partial_chunk_size = 0;
        for (int chunk_count = 0; chunk_count < chunks_to_get; chunk_count++)
        {
            int[] selected_course_numbers_chunk_array;
            int current_chunk_size = 0;

            // Should we get a full size chunk or a partial chunk?
            if ((chunk_count + 1) * CHUNK_SIZE < total_selected)
            {
                // We've got an entire chunk to get
                current_chunk_size = CHUNK_SIZE;
            }
            else
            {
                // We've got a partial chunk to get
                partial_chunk_size = total_selected - (chunk_count * CHUNK_SIZE);
                current_chunk_size = partial_chunk_size;
            }


            // Fill in our selected course numbers chunk
            selected_course_numbers_chunk_array = new int[current_chunk_size];
            for (int i = 0; i < current_chunk_size; i++)
            {
                selected_course_numbers_chunk_array[i] =
                                aSelectedCourseNumbers[i + (chunk_count * CHUNK_SIZE)];
            }

            try
            {
                // Do the invoke on the Registrar object to get the
                // details from the server
                chunk_details_from_server =
                    gRegistrarObjRef.get_courses_details(
                            selected_course_numbers_chunk_array );
            }
            catch(org.omg.CORBA.SystemException e)
            {
                System.err.println(e);
                System.err.println("Unable to get course details from server");
            }
            
            int total_fetched = ((chunk_count + 1) * CHUNK_SIZE) + partial_chunk_size;
            showStatus("Obtained " + total_fetched + "Course Details from server");

            // Figure out how many details we already have gotten in previous
            // chunks that we have to save
            int chunks_in_hand_length = 0;
            if (chunks_in_hand != null)
                chunks_in_hand_length = chunks_in_hand.length;

            // Figure out how many details we'll have when we add the details
            // we already got to the details we just fetched from the server
            int new_chunks_length = chunks_in_hand_length +
                                        chunk_details_from_server.length;

            // Make a new temporary chunks array to hold everything
            UniversityP.CourseDetails[] temp_details_chunks =
                            new UniversityP.CourseDetails[new_chunks_length];

            // Do we need to save away any existing chunks?
            int new_chunks_index = 0;
            if (chunks_in_hand_length != 0)
            {
                // Yes, save away the chunks of details we already had
                for (; new_chunks_index < chunks_in_hand_length; new_chunks_index++)
                    temp_details_chunks[new_chunks_index] =
                                            chunks_in_hand[new_chunks_index];
            }

            // Now add the chunk of details we just got from the server
            for (int j = 0; new_chunks_index < new_chunks_length; new_chunks_index++, j++)
                temp_details_chunks[new_chunks_index] = chunk_details_from_server[j];

            // Hold on to our new bigger chunks array
            chunks_in_hand = temp_details_chunks;
            temp_details_chunks = null;
            selected_course_numbers_chunk_array = null;
        } // for
        
        gCourseDetailsFromSrvr = chunks_in_hand;
        chunks_in_hand = null;
        
        // We're at the first course in the details list
        gCurrentDetailsIndex = 0;

        // Display the details for the first course selected
        // by the user
        fillDetailsPanel( gCourseDetailsFromSrvr[0] );

        // We know that there won't be any previous courses to start since
        // we're starting at the first course
        DetailsPrevBtn.setEnabled(false);

        // We want to make sure that the Next button is set correctly
        // when we show the details for the first course the user selected.
        if (gCourseDetailsFromSrvr.length > 1)
            DetailsNextBtn.setEnabled(true);
        else
            DetailsNextBtn.setEnabled(false);
    }


    /**
     * Fills in the details panel with the information for a particular
     * course which is passed in to it.
     *
     * @param aDetailsForCourse Contains details on one course
     */
    void fillDetailsPanel( UniversityP.CourseDetails aDetailsForCourse)
    {
        // Fill in the information in the Details Info panel
        DetailsInfoIdValueLabel.setText( (new Integer(aDetailsForCourse.course_number).toString()));
        DetailsInfoProfessorValueLabel.setText( aDetailsForCourse.professor);
        DetailsInfoTitleValueLabel.setText( aDetailsForCourse.title);
        Float f_bal = new Float(aDetailsForCourse.cost);
        DetailsInfoCostValueLabel.setText( "$" + f_bal.toString());
        DetailsInfoCreditsValueLabel.setText( (new Integer(aDetailsForCourse.number_of_credits).toString()));
        //if ( aDetailsForCourse.number_of_seats > aDetailsForCourse.number_of_registered_students)
            DetailsInfoOpenValueLabel.setText( "yes");
        //else
        //    DetailsInfoOpenValueLabel.setText( "closed");


        // Do the schedule stuff, start time, duration, days of the week
        int start_hours = aDetailsForCourse.class_schedule.start_hour;
        String start_time = new Integer(start_hours).toString() +
                                            ":00";
        DetailsInfoSchedTimeLabel.setText(start_time);

        int duration_hours = aDetailsForCourse.class_schedule.duration/60;
        int duration_minutes = aDetailsForCourse.class_schedule.duration -
                                    (duration_hours * 60);
        String string_duration_minutes;
        if (duration_minutes == 0)
            string_duration_minutes = "00";
        else
            string_duration_minutes = new Integer(duration_minutes).toString();
        String duration_time = new Integer(duration_hours).toString() +
                                            ":" + string_duration_minutes;
        DetailsInfoDurationValueLabel.setText(duration_time);

        if ((aDetailsForCourse.class_schedule.class_days & UniversityP.MONDAY.value) != 0)
            DetailsInfoMonLabel.setForeground(gPurpleColor);
        else
            DetailsInfoMonLabel.setForeground(gGrayColor);

        if ((aDetailsForCourse.class_schedule.class_days & UniversityP.TUESDAY.value) != 0)
            DetailsInfoTueLabel.setForeground(gPurpleColor);
        else
            DetailsInfoTueLabel.setForeground(gGrayColor);

        if ((aDetailsForCourse.class_schedule.class_days & UniversityP.WEDNESDAY.value) != 0)
            DetailsInfoWedLabel.setForeground(gPurpleColor);
        else
            DetailsInfoWedLabel.setForeground(gGrayColor);

        if ((aDetailsForCourse.class_schedule.class_days & UniversityP.THURSDAY.value) != 0)
            DetailsInfoThuLabel.setForeground(gPurpleColor);
        else
            DetailsInfoThuLabel.setForeground(gGrayColor);

        if ((aDetailsForCourse.class_schedule.class_days & UniversityP.FRIDAY.value) != 0)
            DetailsInfoFriLabel.setForeground(gPurpleColor);
        else
            DetailsInfoFriLabel.setForeground(gGrayColor);

        // Fill in the description of the course
        DetailsDescTextArea.setText( aDetailsForCourse.description);
    }


    void NextButton_MouseClick(java.awt.event.MouseEvent event)
    {
        if (!gRegistering)
            nextSynopsisDetails();
        else
            nextRegisteredDetails();
    }

    void nextSynopsisDetails()
    {
        if (gCurrentDetailsIndex < gCourseDetailsFromSrvr.length - 1)
        {
            gCurrentDetailsIndex++;
            fillDetailsPanel( gCourseDetailsFromSrvr[gCurrentDetailsIndex]);

            DetailsPrevBtn.setEnabled(true);

            // Make sure we don't walk off the end
            if (gCurrentDetailsIndex >= gCourseDetailsFromSrvr.length - 1)
            {
                DetailsNextBtn.setEnabled(false);
            }

        }
    }

    void nextRegisteredDetails()
    {
        if (gCurrentDetailsIndex < gRegisteredCourses.length - 1)
        {
            gCurrentDetailsIndex++;
            fillDetailsPanel( gRegisteredCourses[gCurrentDetailsIndex]);

            DetailsPrevBtn.setEnabled(true);

            // Make sure we don't walk off the end
            if (gCurrentDetailsIndex >= gRegisteredCourses.length - 1)
            {
                DetailsNextBtn.setEnabled(false);
            }

        }
    }

    void PrevButton_MouseClick(java.awt.event.MouseEvent event)
    {
        if (!gRegistering)
            previousSynopsisDetails();
        else
            previousRegisteredDetails();
    }

    void previousSynopsisDetails()
    {
        // There is at least one more
        if (gCurrentDetailsIndex > 0)
        {
            gCurrentDetailsIndex--;
            fillDetailsPanel( gCourseDetailsFromSrvr[gCurrentDetailsIndex]);

            DetailsNextBtn.setEnabled(true);

            // Make sure we don't walk off the end
            if (gCurrentDetailsIndex == 0)
            {
                DetailsPrevBtn.setEnabled(false);
            }

        }

    }

    void previousRegisteredDetails()
    {
        // There is at least one more
        if (gCurrentDetailsIndex > 0)
        {
            gCurrentDetailsIndex--;
            fillDetailsPanel( gRegisteredCourses[gCurrentDetailsIndex]);

            DetailsNextBtn.setEnabled(true);

            // Make sure we don't walk off the end
            if (gCurrentDetailsIndex == 0)
            {
                DetailsPrevBtn.setEnabled(false);
            }

        }

    }

    
    // Get student details
    boolean getStudentDetails()
    {
        int student_id = Integer.parseInt (gUserId.toString());
        boolean valid_id = true;
        try
        {
            // Do the invoke on the Registrar object to get the
            // student details
            gStudentDetails = 
                gRegistrarObjRef.get_student_details(student_id);
        }
        catch(org.omg.CORBA.OBJ_ADAPTER e)
        {
            valid_id = false;
        }
        catch(org.omg.CORBA.NO_IMPLEMENT e)
        {
            valid_id = false;
        }
        catch(org.omg.CORBA.BAD_PARAM e)
        {
            valid_id = false;
        }
        catch(org.omg.CORBA.SystemException e)
        {
            valid_id= false;
            System.err.println("System exception " + e);
            System.exit(1);
        }

        return valid_id;
    }

    // Update balance
    void updateStudentBalance()
    {
        if (gStudentDetails != null)
        {
            Float f_bal = new Float(gStudentDetails.balance);
            StudentBalValLabel.setText( "$" + f_bal.toString());
            StudentBalLabel.setVisible(true);
            StudentBalValLabel.setVisible(true);
        }        
    }
    
    // Get the student name
    void updateStudentName()
    {
        if (gStudentDetails != null)
        {
            StudentNameValLabel.setText( gStudentDetails.name );
        }        
    
    }


    // Show Courses the Student is Registered in
    void showStudentRegistered()
    {
        StudentCourseList.setVisible(false);
        StudentCourseList.setEnabled(false);
        StudentCourseList.removeAll();
        gRegistering = true;
        boolean found_something = false;

        int student_id = Integer.parseInt (gUserId.toString());
        try
        {
            // Do the invoke on the Registrar object to get the student
            // details
            if (!getStudentDetails())
            {
                showStatus("Unable to get student details from the server");
                return;
            }
            
            if (gStudentDetails.registered_courses.length != 0)
            {
                gRegisteredCourses =
                     gStudentDetails.registered_courses;
                for (int i = 0; i < gRegisteredCourses.length; i++)
                {
                    Integer course_number = new Integer(gRegisteredCourses[i].course_number);

                    int padding = 20 - gRegisteredCourses[i].title.length();
                    String padding_spaces = "";
                    for (int j = 0; j < padding; j++)
                    {
                        padding_spaces = padding_spaces + " ";
                    }
                    StudentCourseList.add( course_number.toString() +
                                    " " +
                                    gRegisteredCourses[i].title +
                                    padding_spaces +
                                    "-yes-");
                    if (!found_something)
                        found_something = true;
                }
            }
        }
        catch(org.omg.CORBA.OBJ_ADAPTER e)
        {
            System.err.println(e);
            System.err.println("Invalid Student Id");
        }

        StudentCourseList.setVisible(true);
        StudentCourseList.setEnabled(true);
    }

    void DetailsPanelCloseButton_MouseClick(java.awt.event.MouseEvent event)
    {
        closeDetails();
    }

    // Do stuff for the Close Button in the Details Panel
    void closeDetails()
    {
        DetailsPanel.setVisible(false);
        StudentPanel.setVisible(true);
    }

    void DetailsNextBtn_KeyPress(java.awt.event.KeyEvent event)
    {
        if (!gRegistering)
            nextSynopsisDetails();
        else
            nextRegisteredDetails();
    }

    void DetailsPrevBtn_KeyPress(java.awt.event.KeyEvent event)
    {
        if (!gRegistering)
            previousSynopsisDetails();
        else
            previousRegisteredDetails();
    }

    void DetailsCloseBtn_KeyPress(java.awt.event.KeyEvent event)
    {
        closeDetails();
    }



    void LogOnButton_MouseClick(java.awt.event.MouseEvent event)
    {
        log_on();
    }

    void LogOnButton_KeyPress(java.awt.event.KeyEvent event)
    {
        log_on();
    }

    void LogOffButton_KeyPress(java.awt.event.KeyEvent event)
    {
        log_off();
    }

    void StudentLogOffBtn_MousePress(java.awt.event.MouseEvent event)
    {
        log_off();
    }

    UniversityP.CourseDetails[]
    getRegisteredCoursesFromServer( int aStudentId)
    {
        UniversityP.StudentDetails student_details = 
            gRegistrarObjRef.get_student_details(aStudentId);
        if (student_details.registered_courses.length != 0)
        {
            UniversityP.CourseDetails[] registered_courses =
                 student_details.registered_courses;
            return registered_courses;
        }
        return new UniversityP.CourseDetails[0];
    }

}
