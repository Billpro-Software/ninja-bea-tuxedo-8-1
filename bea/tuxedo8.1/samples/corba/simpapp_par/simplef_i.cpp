//	(c) 2003 BEA Systems, Inc. All Rights Reserved. 
//--------------------------------------------------------------------
//
// simplef_i.cpp
//
// C++ servant implementations for the simpapp_par sample factory.
//
// This file was originally generated by using the "-i" idl switch,
// then edited by hand.
//
// BEA Systems Inc. sample code
//
//--------------------------------------------------------------------

#include <ctype.h> // toupper, tolower
#include <TP.h>
#include "simplef_i.h"

#ifdef WIN32
#include <process.h>
#else
#include <unistd.h>
#endif

//--------------------------------------------------------------------
// Implementation of the SimpleFactory_i::find_simple method which
// creates an object reference to a Simple object.
//--------------------------------------------------------------------

Simple_ptr SimpleFactory_i::find_simple()
{
    // Use a var to hold the object reference so that it's
    // automatically released.

    // For the purpose of this sample, all objects will be created with the 
    // same oid.  Because the interface is configured with 
    // concurrency_policy=user_controlled (see simple.icf), if a client tries 
    // to invoke a method on an object with this id when it is already busy, 
    // the invocation will be routed to another non-busy server if one is 
    // currently available.

    CORBA::String_var oid = CORBA::string_dup("simple");

    CORBA::Object_var v_simple_oref =
        TP::create_object_reference(
            _tc_Simple->id(),     // interface id
            oid.in(),             // object id
            CORBA::NVList::_nil() // routing criteria
        );

    // Send back the narrowed reference.  The ORB will
    // be responsible for releasing it since it's a return value.
    return Simple::_narrow(v_simple_oref.in());
}

//--------------------------------------------------------------------
